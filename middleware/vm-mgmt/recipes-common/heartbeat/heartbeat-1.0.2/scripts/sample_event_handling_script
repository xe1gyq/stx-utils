#!/bin/sh
#
# Copyright (c) 2013-2014 Wind River Systems, Inc.
#
# SPDX-License-Identifier: Apache-2.0
#


###
###

MSG=$1
EVENT=$2
FILE="/tmp/event_timeout"

if [ -f $FILE ];
then
   echo "File $FILE exists."
   logger "File $FILE exists. Run slowly to trigger timeout"
   sleep 300
   logger "$FILE induced delay ends"
else
   ## echo "File $FILE does not exist."
   logger "File $FILE does not exist."
fi

if [ "$MSG" == "revocable" ]
then
   # Vote on the proposed action 
   #    0 == agree
   #    1 == reject
   # Take no actions yet.  
   # If no other parties have rejected the proposed action, 
   # an "irrevocable" notification will soon follow.

   if [ $EVENT == "stop" ]
   then
      FILE="/tmp/vote_no_to_stop"
   elif [ "$EVENT" == "reboot" ]
   then
      FILE="/tmp/vote_no_to_reboot"
   elif [ "$EVENT" == "downscale" ]
   then
      FILE="/tmp/vote_no_to_downscale"
   elif [ "$EVENT" == "suspend" ] || [ "$EVENT" == "pause" ]
   then
      FILE="/tmp/vote_no_to_suspend"
   elif [ "$EVENT" == "live_migrate_begin" ] || [ "$EVENT" == "cold_migrate_begin" ]
   then
      FILE="/tmp/vote_no_to_migrate"
   elif [ "$EVENT" == "live_migrate_end" ] || [ "$EVENT" == "cold_migrate_end" ] || [ "$EVENT" == "unpause" ] || [ "$EVENT" == "resume" ]
   then
      logger "Should never be asked to vote on $EVENT"
      echo "Should never be asked to vote on $EVENT"
      exit 1
   fi

   if [ -f $FILE ];
   then
      echo "File $FILE exists."
      logger "File $FILE exists."
      logger "Vote against $EVENT at this time."

      # Vote no to shutdown
      exit 1
   else
      echo "File $FILE does not exist."
      logger "File $FILE does not exists."
      logger "Vote to allow $EVENT"
   fi

   # Vote yes to shutdown
   exit 0
elif [ "$MSG" == "irrevocable" ]
then

   if [ $EVENT == "stop" ]
   then
      logger "Notification of pending $EVENT recieved."
      # Place clean shutdown actions here.  Idea is to 
      # hand off activity and cleanly stop the payload application.
      # It is not required to stop the kernel, 
      # an ACPI power-off event will follow.
   elif [ "$EVENT" == "reboot" ]
   then
      logger "Notification of pending $EVENT recieved."
      # Place clean shutdown actions here.  Idea is to 
      # hand off activity and cleanly stop the payload application.
      # It is not required to stop/reboot the kernel, 
      # an ACPI power-off event will follow, and then a power-on
   elif [ "$EVENT" == "downscale" ]
   then
      logger "Notification of pending $EVENT recieved."
      # Place clean downscale and shutdown actions here.  Idea is to 
      # hand off activity and cleanly stop the payload application.
      # It is not required to stop/reboot the kernel, 
      # an ACPI power-off event will follow.
   elif [ "$EVENT" == "suspend" ] || [ "$EVENT" == "pause" ]
   then
      logger "Notification of pending $EVENT recieved."
      # This VM will be suspended but not rebooted.
      # Hand off activity and cleanly stop the payload application if required.
   elif [ "$EVENT" == "unpause" ] || [ "$EVENT" == "resume" ]
   then
      logger "Notification of $EVENT completion recieved."
      # This VM has resumed from a paused state.
      # Restart your applcation and take activity as required.
   elif [ "$EVENT" == "live_migrate_begin" ] || [ "$EVENT" == "cold_migrate_begin" ]
   then
      logger "Notification of pending migration recieved. ($EVENT)"
      # This VM will soon relocate to a different host.  
      # Network connectivity may change.
      # Hand off activity and cleanly stop the payload application if required.
   elif [ "$EVENT" == "live_migrate_end" ] || [ "$EVENT" == "cold_migrate_end" ]
   then
      logger "Notification of migration complete recieved."
      # This VM has finished reloacation to a new host.
      # Network connectivity may have changed. 
      # Restart your applcation and/or re-establish your network connectivity as required.
   fi

   sleep 1
   exit 0
else
   echo "Unknown msg type '$MSG'"
   logger "Unknown msg type '$MSG'"
   sleep 1
   exit -1
fi
